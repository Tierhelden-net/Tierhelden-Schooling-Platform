datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?   @db.Text
  price       Float?
  isPublished Boolean   @default(false)

  categoryId String?
  category   Category?  @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  quizzes     CourseQuiz[]    @relation("CourseToCourseQuiz")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@fulltext([title])

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  user_id       String         @id @default(uuid())
  email         String?        @unique 
  name          String?        
  user_role     UserRole? 

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  userAnswers   UserAnswer[]
  quizAttempts  QuizAttempt[]
}

model Quiz {
  quiz_id         Int        @id @default(autoincrement())
  quiz_name       String?
  quiz_synopsis   String?
  quit_category   QuizCategory?
  max_points      Int?
  passing_points  Int?
  question_number Int?
  random_questions Boolean @default(false)

  questions       Question[]
  quizAttempts    QuizAttempt[]
  userAnswers     UserAnswer[]
  courses         CourseQuiz[]    @relation("QuizToCourseQuiz")

  createdBy  String? 
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CourseQuiz {
  id        Int    @id @default(autoincrement())
  quiz_id   Int
  course_id String

  quiz      Quiz   @relation("QuizToCourseQuiz", fields: [quiz_id], references: [quiz_id], onDelete: Cascade)
  course    Course @relation("CourseToCourseQuiz", fields: [course_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([quiz_id, course_id])
}

model Question {
  question_id                   Int       @id @default(autoincrement())
  question_title                String?
  question_text                 String?
  question_type                 QuestionType?
  question_pic                  String?
  question_video                String?
  answer_selection_type         AnswerSelectionType?
  correct_answers               Int?
  message_for_correct_answer    String?
  message_for_incorrect_answer  String?
  explanation                   String?
  is_knockout                   Boolean?
  points                        Int? 

  quiz_id       Int
  quiz          Quiz      @relation(fields: [quiz_id], references: [quiz_id])

  answers       Answer[]
  userAnswers   UserAnswer[]

  createdBy     String 
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([quiz_id])
}

model UserAnswer {
  user_answer_id  Int         @id @default(autoincrement())
  user_id         String
  quiz_attempt_id Int         
  quiz_id         Int
  question_id     Int
  answer_id       Int?
  selected_order  Int?        
  answered_at     DateTime    @default(now())
  
  user      User       @relation(fields: [user_id], references: [user_id])
  quiz      Quiz       @relation(fields: [quiz_id], references: [quiz_id])
  quizAttempt QuizAttempt @relation(fields: [quiz_attempt_id], references: [quiz_attempt_id])
  question  Question   @relation(fields: [question_id], references: [question_id])
  answer    Answer?    @relation(fields: [answer_id], references: [answer_id])
  
  @@index([quiz_attempt_id])
}

model Answer {
  answer_id    Int      @id @default(autoincrement())
  answer_text  String?
  answer_pic   String?
  answer_video String?
  is_correct   Boolean
  position     Int?

  question_id  Int
  question     Question @relation(fields: [question_id], references: [question_id])

  userAnswers  UserAnswer[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([question_id])
}

model QuizAttempt {
  quiz_attempt_id    Int          @id @default(autoincrement())
  user_id       String
  quiz_id       Int
  total_score   Int
  passed        Boolean
  attempt_at    DateTime     @default(now())
  userAnswers   UserAnswer[]
  
  user          User         @relation(fields: [user_id], references: [user_id])
  quiz          Quiz         @relation(fields: [quiz_id], references: [quiz_id])
}

enum QuestionType {
  MULTIPLE
  ORDER
}

enum AnswerSelectionType {
  SINGLE
  MULTIPLE
}

enum UserRole {
  BETREUER
  BERATERUNDBETREUER
  BERATER
  ADMIN
}

enum QuizCategory {
  EXAM
}